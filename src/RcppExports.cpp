// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// SPARSEmaketreelistMCMC
NumericMatrix SPARSEmaketreelistMCMC(List& x, NumericMatrix& Q, NumericVector& pid, NumericMatrix& B, double Omega, IntegerVector& nen, IntegerVector& nodelist, int root, int N);
RcppExport SEXP phylomap_SPARSEmaketreelistMCMC(SEXP xSEXP, SEXP QSEXP, SEXP pidSEXP, SEXP BSEXP, SEXP OmegaSEXP, SEXP nenSEXP, SEXP nodelistSEXP, SEXP rootSEXP, SEXP NSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List& >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericMatrix& >::type Q(QSEXP );
        Rcpp::traits::input_parameter< NumericVector& >::type pid(pidSEXP );
        Rcpp::traits::input_parameter< NumericMatrix& >::type B(BSEXP );
        Rcpp::traits::input_parameter< double >::type Omega(OmegaSEXP );
        Rcpp::traits::input_parameter< IntegerVector& >::type nen(nenSEXP );
        Rcpp::traits::input_parameter< IntegerVector& >::type nodelist(nodelistSEXP );
        Rcpp::traits::input_parameter< int >::type root(rootSEXP );
        Rcpp::traits::input_parameter< int >::type N(NSEXP );
        NumericMatrix __result = SPARSEmaketreelistMCMC(x, Q, pid, B, Omega, nen, nodelist, root, N);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// maketreelistMCMC
NumericMatrix maketreelistMCMC(List& x, NumericMatrix& Q, NumericVector& pid, NumericMatrix& B, double Omega, IntegerVector& nen, IntegerVector& nodelist, int root, int N);
RcppExport SEXP phylomap_maketreelistMCMC(SEXP xSEXP, SEXP QSEXP, SEXP pidSEXP, SEXP BSEXP, SEXP OmegaSEXP, SEXP nenSEXP, SEXP nodelistSEXP, SEXP rootSEXP, SEXP NSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List& >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericMatrix& >::type Q(QSEXP );
        Rcpp::traits::input_parameter< NumericVector& >::type pid(pidSEXP );
        Rcpp::traits::input_parameter< NumericMatrix& >::type B(BSEXP );
        Rcpp::traits::input_parameter< double >::type Omega(OmegaSEXP );
        Rcpp::traits::input_parameter< IntegerVector& >::type nen(nenSEXP );
        Rcpp::traits::input_parameter< IntegerVector& >::type nodelist(nodelistSEXP );
        Rcpp::traits::input_parameter< int >::type root(rootSEXP );
        Rcpp::traits::input_parameter< int >::type N(NSEXP );
        NumericMatrix __result = maketreelistMCMC(x, Q, pid, B, Omega, nen, nodelist, root, N);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// maketreelistEXP
NumericMatrix maketreelistEXP(List& x, NumericMatrix& Q, NumericVector& pid, IntegerVector& nen, IntegerVector& nodelist, int root, int N, NumericMatrix& lefts, NumericMatrix& rights, NumericMatrix& d);
RcppExport SEXP phylomap_maketreelistEXP(SEXP xSEXP, SEXP QSEXP, SEXP pidSEXP, SEXP nenSEXP, SEXP nodelistSEXP, SEXP rootSEXP, SEXP NSEXP, SEXP leftsSEXP, SEXP rightsSEXP, SEXP dSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List& >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericMatrix& >::type Q(QSEXP );
        Rcpp::traits::input_parameter< NumericVector& >::type pid(pidSEXP );
        Rcpp::traits::input_parameter< IntegerVector& >::type nen(nenSEXP );
        Rcpp::traits::input_parameter< IntegerVector& >::type nodelist(nodelistSEXP );
        Rcpp::traits::input_parameter< int >::type root(rootSEXP );
        Rcpp::traits::input_parameter< int >::type N(NSEXP );
        Rcpp::traits::input_parameter< NumericMatrix& >::type lefts(leftsSEXP );
        Rcpp::traits::input_parameter< NumericMatrix& >::type rights(rightsSEXP );
        Rcpp::traits::input_parameter< NumericMatrix& >::type d(dSEXP );
        NumericMatrix __result = maketreelistEXP(x, Q, pid, nen, nodelist, root, N, lefts, rights, d);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}


// maketreelistMCMCbf
NumericMatrix maketreelistMCMCbf(List& x,NumericMatrix& Q,NumericVector& pid,NumericMatrix& B,double Omega,IntegerVector& nen,IntegerVector& nodelist,int root,int N,NumericVector& prior);
RcppExport SEXP phylomap_maketreelistMCMCbf(SEXP xSEXP,SEXP QSEXP,SEXP pidSEXP,SEXP BSEXP,SEXP OmegaSEXP,SEXP nenSEXP,SEXP nodelistSEXP,SEXP rootSEXP,SEXP NSEXP,SEXP priorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List& >::type x(xSEXP);
        Rcpp::traits::input_parameter< NumericMatrix& >::type Q(QSEXP);
        Rcpp::traits::input_parameter< NumericVector& >::type pid(pidSEXP);
        Rcpp::traits::input_parameter< NumericMatrix& >::type B(BSEXP);
        Rcpp::traits::input_parameter< double >::type Omega(OmegaSEXP);
        Rcpp::traits::input_parameter< IntegerVector& >::type nen(nenSEXP);
        Rcpp::traits::input_parameter< IntegerVector& >::type nodelist(nodelistSEXP);
        Rcpp::traits::input_parameter< int >::type root(rootSEXP);
        Rcpp::traits::input_parameter< int >::type N(NSEXP);
        Rcpp::traits::input_parameter< NumericVector& >::type prior(priorSEXP);

        NumericMatrix __result = maketreelistMCMCbf(x,Q,pid,B,Omega,nen,nodelist,root,N,prior);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}

// maketreelistMCMCks
NumericMatrix maketreelistMCMCks(List& x,NumericMatrix& Q,NumericVector& pid,NumericMatrix& B,double Omega,IntegerVector& nen,IntegerVector& nodelist,int root,int N,NumericVector& prior);
RcppExport SEXP phylomap_maketreelistMCMCks(SEXP xSEXP,SEXP QSEXP,SEXP pidSEXP,SEXP BSEXP,SEXP OmegaSEXP,SEXP nenSEXP,SEXP nodelistSEXP,SEXP rootSEXP,SEXP NSEXP,SEXP priorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List& >::type x(xSEXP);
        Rcpp::traits::input_parameter< NumericMatrix& >::type Q(QSEXP);
        Rcpp::traits::input_parameter< NumericVector& >::type pid(pidSEXP);
        Rcpp::traits::input_parameter< NumericMatrix& >::type B(BSEXP);
        Rcpp::traits::input_parameter< double >::type Omega(OmegaSEXP);
        Rcpp::traits::input_parameter< IntegerVector& >::type nen(nenSEXP);
        Rcpp::traits::input_parameter< IntegerVector& >::type nodelist(nodelistSEXP);
        Rcpp::traits::input_parameter< int >::type root(rootSEXP);
        Rcpp::traits::input_parameter< int >::type N(NSEXP);
        Rcpp::traits::input_parameter< NumericVector& >::type prior(priorSEXP);

        NumericMatrix __result = maketreelistMCMCks(x,Q,pid,B,Omega,nen,nodelist,root,N,prior);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}


// maketreelistMCMCmt
NumericMatrix maketreelistMCMCmt(List& x,NumericMatrix& Q,NumericVector& pid,NumericMatrix& B,double Omega,IntegerMatrix& nen_m,IntegerMatrix& nodelist_m,IntegerVector roots,int N,NumericVector& prior);
RcppExport SEXP phylomap_maketreelistMCMCmt(SEXP xSEXP,SEXP QSEXP,SEXP pidSEXP,SEXP BSEXP,SEXP OmegaSEXP,SEXP nen_mSEXP,SEXP nodelist_mSEXP,SEXP rootsSEXP,SEXP NSEXP,SEXP priorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List& >::type x(xSEXP);
        Rcpp::traits::input_parameter< NumericMatrix& >::type Q(QSEXP);
        Rcpp::traits::input_parameter< NumericVector& >::type pid(pidSEXP);
        Rcpp::traits::input_parameter< NumericMatrix& >::type B(BSEXP);
        Rcpp::traits::input_parameter< double >::type Omega(OmegaSEXP);
        Rcpp::traits::input_parameter< IntegerMatrix& >::type nen_m(nen_mSEXP);
        Rcpp::traits::input_parameter< IntegerMatrix& >::type nodelist_m(nodelist_mSEXP);
        Rcpp::traits::input_parameter< IntegerVector& >::type roots(rootsSEXP);
        Rcpp::traits::input_parameter< int >::type N(NSEXP);
        Rcpp::traits::input_parameter< NumericVector& >::type prior(priorSEXP);

        NumericMatrix __result = maketreelistMCMCmt(x,Q,pid,B,Omega,nen_m,nodelist_m,roots,N,prior);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}

// maketreelistMCMCksmt
NumericMatrix maketreelistMCMCksmt(List& x,NumericMatrix& Q,NumericVector& pid,NumericMatrix& B,double Omega,IntegerMatrix& nen_m,IntegerMatrix& nodelist_m,IntegerVector roots,int N,NumericVector& prior);
RcppExport SEXP phylomap_maketreelistMCMCksmt(SEXP xSEXP,SEXP QSEXP,SEXP pidSEXP,SEXP BSEXP,SEXP OmegaSEXP,SEXP nen_mSEXP,SEXP nodelist_mSEXP,SEXP rootsSEXP,SEXP NSEXP,SEXP priorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List& >::type x(xSEXP);
        Rcpp::traits::input_parameter< NumericMatrix& >::type Q(QSEXP);
        Rcpp::traits::input_parameter< NumericVector& >::type pid(pidSEXP);
        Rcpp::traits::input_parameter< NumericMatrix& >::type B(BSEXP);
        Rcpp::traits::input_parameter< double >::type Omega(OmegaSEXP);
        Rcpp::traits::input_parameter< IntegerMatrix& >::type nen_m(nen_mSEXP);
        Rcpp::traits::input_parameter< IntegerMatrix& >::type nodelist_m(nodelist_mSEXP);
        Rcpp::traits::input_parameter< IntegerVector& >::type roots(rootsSEXP);
        Rcpp::traits::input_parameter< int >::type N(NSEXP);
        Rcpp::traits::input_parameter< NumericVector& >::type prior(priorSEXP);

        NumericMatrix __result = maketreelistMCMCksmt(x,Q,pid,B,Omega,nen_m,nodelist_m,roots,N,prior);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}

// maketreelistMCMC2sDICt
NumericMatrix maketreelistMCMC2sDICt(List& x,NumericMatrix& Q,NumericVector& pid,NumericMatrix& B,double Omega,IntegerVector& nen,IntegerVector& nodelist,int root,int N,NumericVector& prior);
RcppExport SEXP phylomap_maketreelistMCMC2sDICt(SEXP xSEXP,SEXP QSEXP,SEXP pidSEXP,SEXP BSEXP,SEXP OmegaSEXP,SEXP nenSEXP,SEXP nodelistSEXP,SEXP rootSEXP,SEXP NSEXP,SEXP priorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List& >::type x(xSEXP);
        Rcpp::traits::input_parameter< NumericMatrix& >::type Q(QSEXP);
        Rcpp::traits::input_parameter< NumericVector& >::type pid(pidSEXP);
        Rcpp::traits::input_parameter< NumericMatrix& >::type B(BSEXP);
        Rcpp::traits::input_parameter< double >::type Omega(OmegaSEXP);
        Rcpp::traits::input_parameter< IntegerVector& >::type nen(nenSEXP);
        Rcpp::traits::input_parameter< IntegerVector& >::type nodelist(nodelistSEXP);
        Rcpp::traits::input_parameter< int >::type root(rootSEXP);
        Rcpp::traits::input_parameter< int >::type N(NSEXP);
        Rcpp::traits::input_parameter< NumericVector& >::type prior(priorSEXP);

        NumericMatrix __result = maketreelistMCMC2sDICt(x,Q,pid,B,Omega,nen,nodelist,root,N,prior);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}

// maketreelistMCMCksDICt
NumericMatrix maketreelistMCMCksDICt(List& x,NumericMatrix& Q,NumericVector& pid,NumericMatrix& B,double Omega,IntegerVector& nen,IntegerVector& nodelist,int root,int N,NumericVector& prior);
RcppExport SEXP phylomap_maketreelistMCMCksDICt(SEXP xSEXP,SEXP QSEXP,SEXP pidSEXP,SEXP BSEXP,SEXP OmegaSEXP,SEXP nenSEXP,SEXP nodelistSEXP,SEXP rootSEXP,SEXP NSEXP,SEXP priorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List& >::type x(xSEXP);
        Rcpp::traits::input_parameter< NumericMatrix& >::type Q(QSEXP);
        Rcpp::traits::input_parameter< NumericVector& >::type pid(pidSEXP);
        Rcpp::traits::input_parameter< NumericMatrix& >::type B(BSEXP);
        Rcpp::traits::input_parameter< double >::type Omega(OmegaSEXP);
        Rcpp::traits::input_parameter< IntegerVector& >::type nen(nenSEXP);
        Rcpp::traits::input_parameter< IntegerVector& >::type nodelist(nodelistSEXP);
        Rcpp::traits::input_parameter< int >::type root(rootSEXP);
        Rcpp::traits::input_parameter< int >::type N(NSEXP);
        Rcpp::traits::input_parameter< NumericVector& >::type prior(priorSEXP);

        NumericMatrix __result = maketreelistMCMCksDICt(x,Q,pid,B,Omega,nen,nodelist,root,N,prior);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
